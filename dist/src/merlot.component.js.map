{"version":3,"file":"merlot.component.js","sourceRoot":"","sources":["../../src/merlot.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAGT,UAAU,EACV,KAAK,EACL,wBAAwB,EAGxB,gBAAgB,EACC,MAAM,eAAe,CAAC;AAChD,OAAO,EAAsD,iBAAiB,EAAE,aAAa,EAAE,SAAS,EAA+B,MAAM,gBAAgB,CAAC;AAC9J,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,OAAO,EAAE,iBAAiB,EAAE,MAAM,0CAA0C,CAAC;AAC7E,OAAO,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAGpE,MAAM,CAAC,IAAM,UAAU,GAAQ;IAC7B,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,eAAe,EAAf,CAAe,CAAC;IAC9C,KAAK,EAAE,IAAI;CACZ,CAAC;AACF,MAAM,CAAC,IAAM,yBAAyB,GAAQ;IAC5C,OAAO,EAAE,aAAa;IACtB,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,eAAe,EAAf,CAAe,CAAC;IAC9C,KAAK,EAAE,IAAI;CACZ,CAAC;;IAmBA,yBACU,MAAc,EACd,eAAyC,EACzC,gBAAkC;QAFlC,WAAM,GAAN,MAAM,CAAQ;QACd,oBAAe,GAAf,eAAe,CAA0B;QACzC,qBAAgB,GAAhB,gBAAgB,CAAkB;gCANZ,EAAC,QAAQ,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,SAAS,EAAE,iBAAiB,EAAE,MAAM,EAAE,cAAc,EAAC;+BA8CxH,UAAC,CAAM,KAAQ;KAvC7B;IAEJ,kCAAQ,GAAR;QAAA,iBAwBC;QAvBC,IAAI,gBAAqB,CAAC;QAC1B,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,YAAY,KAAK,CAAC,CAAC,CAAC;;YAEhC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC;SACnC;QACD,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACxE,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACrB,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,gBAAgB,CAAC;gBAC1E,CAAC,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;YAC/E,EAAE,CAAA,CAAC,gBAAgB,KAAK,SAAS,CAAC,CAAC,CAAC;gBAClC,OAAO,CAAC,KAAK,CAAC,oCAAiC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,gDAA4C,CAAC,CAAC;gBAC7I,MAAM,CAAC;aACR;SACF;QAAC,IAAI,CAAC,CAAC;YACN,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,yBAAyB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACvH;QACD,IAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,CAAC;QAC/E,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;QACtE,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAChD,IAAI,CAAC,SAAS,CAAC,QAAS,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC9C,IAAI,CAAC,SAAS,CAAC,QAAS,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC9C,IAAI,CAAC,SAAS,CAAC,QAAS,CAAC,aAAa,CAAC,SAAS,CAAC,UAAC,KAAU,IAAO,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;KACtG;IAED,oCAAU,GAAV,UAAW,KAAU;QACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACrB;IAED,0CAAgB,GAAhB,UAAiB,EAAO;QACtB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;KAC3B;IAED,2CAAiB,GAAjB,UAAkB,EAAO;KACxB;IAID,kCAAQ,GAAR,UAAS,OAAwB;QAC/B,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAC1C,MAAM,CAAC,IAAI,CAAC;KACb;IAID,qCAAW,GAAX,UAAY,IAAS;QACnB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;KAC5B;;gBAzEF,SAAS,SAAC;;oBAET,QAAQ,EAAE,QAAQ;oBAClB,QAAQ,EAAE,EAAE;oBACZ,SAAS,EAAE,CAAC,UAAU,EAAE,yBAAyB,CAAC;iBACnD;;;;gBArBQ,MAAM;gBANN,wBAAwB;gBAGxB,gBAAgB;;;oCA0BtB,KAAK,SAAC,iBAAiB;mCACvB,KAAK,SAAC,gBAAgB;2BACtB,KAAK,SAAC,QAAQ;qCACd,KAAK,SAAC,kBAAkB;;0BArC3B;;SAiCa,eAAe","sourcesContent":["import { Component,\n         OnInit,\n         ViewChild,\n         forwardRef,\n         Input,\n         ComponentFactoryResolver,\n         Injectable,\n         Inject,\n         ViewContainerRef, \n         ComponentFactory} from '@angular/core';\nimport { FormControl, AbstractControl, ControlValueAccessor, NG_VALUE_ACCESSOR, NG_VALIDATORS, FormArray, Validator, ValidationErrors } from '@angular/forms';\nimport { Merlot } from './merlot.service';\n\nimport { CheckboxComponent } from './components/checkbox/checkbox.component';\nimport { InputComponent } from './components/input/input.component';\nimport { RadioComponent } from './components/radio/radio.component';\n\nexport const MERLOT_CVA: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MerlotComponent),\n  multi: true\n};\nexport const MERLOT_FORWARD_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MerlotComponent),\n  multi: true,\n};\n@Component({\n  // tslint:disable-next-line\n  selector: 'merlot',\n  template: '',\n  providers: [MERLOT_CVA, MERLOT_FORWARD_VALIDATORS]\n})\nexport class MerlotComponent implements OnInit, ControlValueAccessor, Validator {\n  @Input('formControlName') formControlName: any;\n  @Input('formArrayItems') formArrayItems: FormArray;\n  @Input('schema') schema: any;\n  @Input('overrideTemplate') overrideTemplate: string;\n\n  public iModel: any;\n  public ui: any;\n\n  private defaultTemplates: any = {'String': InputComponent, 'Number': InputComponent, 'Boolean': CheckboxComponent, 'Date': InputComponent};\n  private component: any;\n\n  constructor(\n    private merlot: Merlot,\n    private factoryResolver: ComponentFactoryResolver,\n    private viewContainerRef: ViewContainerRef\n  ) {}\n\n  ngOnInit() {\n    let dynamicComponent: any;\n    if(this.schema instanceof Array) {\n      // Arrays within merlot-component can only be used, when they dont contain any other children.\n      this.schema = this.schema[0];\n      this.iModel = this.formArrayItems;\n    }\n    if((this.schema.ui && this.schema.ui.template) || this.overrideTemplate) {\n      (this.overrideTemplate) ?\n          dynamicComponent = this.merlot.getComponentByName(this.overrideTemplate)\n        : dynamicComponent = this.merlot.getComponentByName(this.schema.ui.template);\n      if(dynamicComponent === undefined) {\n        console.error(`Can't find an Component named ${this.overrideTemplate || this.schema.ui.template}. Did you forget to register it to Merlot?`);\n        return;\n      }\n    } else {\n      dynamicComponent = this.merlot.getDefaultComponentByType(this.schema.type) || this.defaultTemplates[this.schema.type];\n    }\n    const factory = this.factoryResolver.resolveComponentFactory(dynamicComponent);\n    this.component = factory.create(this.viewContainerRef.parentInjector);\n    this.viewContainerRef.insert(this.component.hostView);\n    (<any>this.component.instance).iModel = this.iModel;\n    (<any>this.component.instance).schema = this.schema;\n    (<any>this.component.instance).ngModelChange.subscribe((event: any) => { this.updateModel(event); });\n  }\n\n  writeValue(value: any): void {\n    this.iModel = value;\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  propagateChange = (_: any) => { };\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    this.component.instance.control = control;\n    return null;\n  }\n\n  registerOnValidatorChange?(fn: () => void): void;\n\n  updateModel(data: any) {\n    this.iModel = data;\n    this.propagateChange(data);\n  }\n\n}\n"]}