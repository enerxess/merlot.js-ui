{"version":3,"file":"merlot.service.js","sourceRoot":"","sources":["../../src/merlot.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, TemplateRef } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable, ReplaySubject } from 'rxjs';\n\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\n\nimport { enumValidator, minNumberValidator } from './validators';\n\n@Injectable()\nexport class Merlot {\n  schemes: ReplaySubject<any> = new ReplaySubject<any>(1);\n  data$: Observable<any> = this.schemes.asObservable();\n\n  public components: any[] = [];\n  public defaultComponents: any = {};\n\n  constructor(\n    private http: HttpClient,\n    private fb: FormBuilder,\n    @Inject('MERLOT_CONFIG') private MERLOT_CONFIG: any\n  ) {\n    this.http.get(`${this.MERLOT_CONFIG.apiUrl}discover`).subscribe(schemesArr => {\n      this.schemes.next(schemesArr);\n    });\n  }\n\n  getSchemaByName(name: string): Observable<any> {\n    return new Observable(observer => {\n      this.schemes.subscribe(schemes => {\n        if(schemes[name]) {\n          observer.next(schemes[name]);\n          observer.complete();\n        } else {\n          observer.error({err: `Schema ${name} unknown.`});\n        }\n      });\n    });\n  }\n\n  /* tslint:disable:no-unused-expression */\n  getValidatorsBySchemaEntry(schemaEntry: any): any[] {\n    const validatorsArr = [];\n    schemaEntry.required ? validatorsArr.push(Validators.required) : '';\n    schemaEntry.enum ? validatorsArr.push(enumValidator(schemaEntry.enum)) : '';\n    if(schemaEntry.type === 'Number') {\n      (schemaEntry.min || schemaEntry.min === 0) ? validatorsArr.push(Validators.min(schemaEntry.min)) : '';\n      (schemaEntry.max || schemaEntry.max === 0) ? validatorsArr.push(Validators.max(schemaEntry.max)) : '';\n    } else if(schemaEntry.type === 'String') {\n      schemaEntry.min ? validatorsArr.push(Validators.minLength(schemaEntry.min)) : '';\n      schemaEntry.max ? validatorsArr.push(Validators.maxLength(schemaEntry.max)) : '';\n      schemaEntry.pattern ? validatorsArr.push(Validators.pattern(schemaEntry.pattern)) : '';\n    }\n    return validatorsArr;\n  }\n\n  getDefaultValue(schema: any) {\n    if(schema.default) {\n      return schema.default;\n    } else {\n      switch(schema.type) {\n        case 'Boolean': return false;\n        default: return '';\n      }\n    }\n  }\n\n  /**\n   * Create a ReactiveForms FormGroup that maps to the given schema.\n   */\n  rParseSchema(form: any, schema: any): FormGroup {\n    Object.keys(schema).forEach(key => {\n      const schemaEntry = schema[key];\n      // Ignore Virtuals\n      if(!schemaEntry.virtual) {\n        if(schemaEntry.type) {\n          form.addControl(key, new FormControl(this.getDefaultValue(schemaEntry), this.getValidatorsBySchemaEntry(schemaEntry)));\n        } else {\n          // Handle if FormArray of FormGroup\n          if(schemaEntry instanceof Array) {\n            // Check if array has childs\n            if(schemaEntry[0].type) {\n              // No Childs expected\n              form.addControl(key, this.fb.array([]));\n            } else {\n              // Childs expected\n              form.addControl(key, this.fb.array([this.rParseSchema(this.fb.group({}), schemaEntry)]));\n            }\n          } else if(schemaEntry instanceof Object) {\n            form.addControl(key, this.rParseSchema(this.fb.group({}), schemaEntry));\n          }\n        }\n      }\n    });\n    return form;\n  }\n\n  createFormBySchema(name: string): Observable<FormGroup> {\n    return new Observable(observer => {\n      let mForm = this.fb.group({});\n      this.getSchemaByName(name).subscribe(schema => {\n        mForm = this.rParseSchema(mForm, schema);\n        observer.next(mForm);\n        observer.complete();\n      });\n    });\n  }\n\n  registerComponent(name: string, component: any): void {\n    this.components.push({name, component});\n  }\n\n  getComponentByName(name: string): any {\n    let component;\n    if(!this.components.length) {\n      return undefined;\n    }\n    this.components.forEach(componentObj => {\n      if(componentObj.name === name) {\n        component = componentObj.component;\n      }\n    });\n    return component;\n  }\n\n  useComponentSet(componentSet: any): void {\n    componentSet.templates.forEach((componentObj: any) => {\n      this.registerComponent(componentObj.name, componentObj.component);\n    });\n    this.defaultComponents = componentSet.defaultTemplates;\n  }\n\n  getDefaultComponentByType(type: any): any {\n    return this.defaultComponents[type];\n  }\n\n}\n"]}